package diplomatiki;

import goal_metamodel.*;
import java.util.ArrayList;
import java.util.Collection;
//import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
//import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Find_Actions {
	
	public static <T> ArrayList<ArrayList<T>> powerSet(ArrayList<T> originalSet) {
		ArrayList<ArrayList<T>> sets = new ArrayList<ArrayList<T>>();
	    if (originalSet.isEmpty()) {
	        sets.add(new ArrayList<T>());
	        return sets;
	    }
	    List<T> list = new ArrayList<T>(originalSet);
	    T head = list.get(0);
	    ArrayList<T> rest = new  ArrayList<T>(list.subList(1, list.size())); 
	    for (ArrayList<T> set : powerSet(rest)) {
	    	ArrayList<T> newSet = new ArrayList<T>();
	        newSet.add(head);
	        newSet.addAll(set);
	        sets.add(newSet);
	        sets.add(set);
	    }       
	    return sets;
	}

	protected ArrayList<ArrayList<Action>> outer = new ArrayList<ArrayList<Action>>();
	//protected ArrayList<Action> inner = new ArrayList<Action>();
	
	public Find_Actions(List<Task> tasks){	
	}
	
	
	public static <T> ArrayList<T> Join(ArrayList<T> list1,  ArrayList<T> list2) {
        ArrayList<T> result = new ArrayList<T>(list1);
        result.addAll(list2);
        return result;
    }

	static void GeneratePermutations(ArrayList<ArrayList<ArrayList<Action>>> Lists, ArrayList<ArrayList<Action>> result, int depth, ArrayList<Action> current)
	{
	    if(depth == Lists.size())
	    {
	    	ArrayList<Action> al = new ArrayList<>(current);
	    	Set<Action> hs = new HashSet<>();
	    	hs.addAll(al);
	    	al.clear();
	    	al.addAll(hs);
	       result.add(al);
	       return;
	     }

	    for(int i = 0; i < Lists.get(depth).size(); ++i)
	    {
	        GeneratePermutations(Lists, result, depth + 1, Join(current,Lists.get(depth).get(i)) );
	    }
	}
	
	//current.addAll(Lists.get(depth).get(i))
	
	
	
	
	public static ArrayList<Task> Find(List<Task> tasks,ArrayList<Task> parallel_tasks,Generator generator){
		
		Goal_metamodelFactory factory=Goal_metamodelFactory.eINSTANCE;
		int max_depth = tasks.get(0).getdepth();
		int size = tasks.size();
		int i=0;
		HashMap<String,Action> global_parallel_actions = new HashMap<String,Action>();
		while(i<size) {
			Task t = tasks.get(i);
			if(t.getdepth() == max_depth) {
				if(t.getHasdecomposition().getType() == DecompositionType.AND) {
					int number_of_components = t.getHasdecomposition().getDecomposed_to().size();
					ArrayList<Action> inner = new ArrayList<Action>();
					HashMap<String,Action> parallel_actions = new HashMap<String,Action>();
					for (int j=0; j<number_of_components;j++) {
						if(t.getHasdecomposition().getDecomposed_to().get(j).getParallelLinks().size()>0) {
							
							if(t.getHasdecomposition().getDecomposed_to().get(j).get_availability_status() == false) {
								continue;
							}
							String name = t.getHasdecomposition().getDecomposed_to().get(j).getParallelLinks().get(0).getTo().getName();  
							Action P;
							if(global_parallel_actions.containsKey(name)) {
								P= global_parallel_actions.get(name);
							}
							else {
								P = factory.createAction();
								global_parallel_actions.put(name, P);
							}
							
							
							P.setName(name);
							P.setIsParallelAction();
							
							parallel_actions.put(name, P);
							generator.getActions().put(name, P);
							
						}
						else {
							if(t.getHasdecomposition().getDecomposed_to().get(j).get_availability_status() == false) {
								continue;
							}
							inner.add((Action)t.getHasdecomposition().getDecomposed_to().get(j));
						}
						
					}
					//ArrayList<Action> values = (ArrayList<Action>) ;
					ArrayList<Action> parallel_actions2 = new ArrayList<Action>(parallel_actions.values());
					//parallel_actions2 =  values;
					inner = Join(inner,parallel_actions2);
					
					t.setOuterList(inner);
				}
				
				else {
					ArrayList<Action> combinations = new ArrayList<Action>();
					int number_of_components = t.getHasdecomposition().getDecomposed_to().size();
					HashMap<String,Action> parallel_actions = new HashMap<String,Action>();
					for (int j=0; j<number_of_components;j++) {
						if(t.getHasdecomposition().getDecomposed_to().get(j).getParallelLinks().size()>0) {
							if(t.getHasdecomposition().getDecomposed_to().get(j).get_availability_status() == false) {
								continue;
							}
							String name = t.getHasdecomposition().getDecomposed_to().get(j).getParallelLinks().get(0).getTo().getName();
							Action P;
							if(global_parallel_actions.containsKey(name)) {
								P= global_parallel_actions.get(name);
							}
							else {
								P = factory.createAction();
								global_parallel_actions.put(name, P);
							}
							
							P.setName(name);
							P.setIsParallelAction();
							parallel_actions.put(name, P);
							generator.getActions().put(name, P);
						}
						else {
							if(t.getHasdecomposition().getDecomposed_to().get(j).get_availability_status() == false) {
								continue;
							}
							//ArrayList<Action> inner = new ArrayList<Action>();
							combinations.add((Action)t.getHasdecomposition().getDecomposed_to().get(j));
							//t.setOuterList(inner);
						}
						
						
					}
					for(Action value : parallel_actions.values()) {
						//ArrayList<Action> parallel_action = new ArrayList<Action>();
						combinations.add(value);
						//t.setOuterList(parallel_action);
					}
					
					
					for (ArrayList<Action> s : powerSet(combinations)) {
						if(s.size()>0) {
							t.setOuterList(s);
						}
						
					}
					
				}
			}
			
			else {
				if(t.getHasdecomposition().getType() == DecompositionType.AND) {
					int number_of_components = t.getHasdecomposition().getDecomposed_to().size();
					ArrayList<ArrayList<ArrayList<Action>>> allActions = new ArrayList<ArrayList<ArrayList<Action>>>();
					HashMap<String,Action> parallel_actions = new HashMap<String,Action>();
					for(int k=0;k<number_of_components;k++) {
						if(t.getHasdecomposition().getDecomposed_to().get(k).get_availability_status() == false) {
							continue;
						}
						if(t.getHasdecomposition().getDecomposed_to().get(k) instanceof Task) {
							Task t1 = (Task)t.getHasdecomposition().getDecomposed_to().get(k);
							if(t1.getParallelLinks().size()>0) {
								parallel_tasks.add(t1);
								String name = t1.getParallelLinks().get(0).getTo().getName();
								Action P;
								if(global_parallel_actions.containsKey(name)) {
									P= global_parallel_actions.get(name);
								}
								else {
									P = factory.createAction();
									global_parallel_actions.put(name, P);
								}
								
								P.setName(name);
								P.setIsParallelAction();
								parallel_actions.put(name, P);
								generator.getActions().put(name, P);
							}
							else {
								allActions.add(t1.getOuterList());
							}
							
						}
						else {
							Action a = (Action)t.getHasdecomposition().getDecomposed_to().get(k);
							if(a.getParallelLinks().size()>0) {
								String name = a.getParallelLinks().get(0).getTo().getName();
								Action P;
								if(global_parallel_actions.containsKey(name)) {
									P= global_parallel_actions.get(name);
								}
								else {
									P = factory.createAction();
									global_parallel_actions.put(name, P);
								}
								
								P.setName(name);
								P.setIsParallelAction();
								parallel_actions.put(name, P);
								generator.getActions().put(name, P);
							}
							else {
								ArrayList<ArrayList<Action>> temp = new ArrayList<ArrayList<Action>>();
								ArrayList<Action> temp1 = new ArrayList<Action>();
								temp1.add(a);
								temp.add(temp1);
								allActions.add(temp);
							}
							
						}
						
					}
					
					for(Action value : parallel_actions.values()) {
						ArrayList<Action> temp = new ArrayList<Action>();
						temp.add(value);
						ArrayList<ArrayList<Action>> temp1 = new ArrayList<ArrayList<Action>>();
						temp1.add(temp);
						allActions.add(temp1);
					}
					
					
					ArrayList<ArrayList<Action>> result = new ArrayList<ArrayList<Action>>();
					ArrayList<Action> current = new ArrayList<Action>();
					GeneratePermutations(allActions,result,0,current);
					t.equateOuterList(result);
				}
				
				else {
					int number_of_components = t.getHasdecomposition().getDecomposed_to().size();
					ArrayList<GoalNode> combinations = new ArrayList<GoalNode>();
					ArrayList<ArrayList<Action>> result = new ArrayList<ArrayList<Action>>();
					HashMap<String,Action> parallel_actions = new HashMap<String,Action>();
					for(int k=0;k<number_of_components;k++) {
						if(t.getHasdecomposition().getDecomposed_to().get(k).get_availability_status() == false) {
							continue;
						}
						if(t.getHasdecomposition().getDecomposed_to().get(k) instanceof Task) {
							Task t1 = (Task)t.getHasdecomposition().getDecomposed_to().get(k);
							if(t1.getParallelLinks().size()>0) {
								parallel_tasks.add(t1);
								String name = t1.getParallelLinks().get(0).getTo().getName();
								Action P;
								if(global_parallel_actions.containsKey(name)) {
									P= global_parallel_actions.get(name);
								}
								else {
									P = factory.createAction();
									global_parallel_actions.put(name, P);
								}
								
								P.setName(name);
								P.setIsParallelAction();
								parallel_actions.put(name, P);
								generator.getActions().put(name, P);
							}
							else {
								combinations.add(t1);
							}
							
						}
						else {
							Action a = (Action)t.getHasdecomposition().getDecomposed_to().get(k);
							if(a.getParallelLinks().size()>0) {
								String name = a.getParallelLinks().get(0).getTo().getName();
								Action P;
								if(global_parallel_actions.containsKey(name)) {
									P= global_parallel_actions.get(name);
								}
								else {
									P = factory.createAction();
									global_parallel_actions.put(name, P);
								}
								
								P.setName(name);
								P.setIsParallelAction();
								parallel_actions.put(name, P);
								generator.getActions().put(name, P);
							}
							else {
								//ArrayList<ArrayList<Action>> temp = new ArrayList<ArrayList<Action>>();
								//ArrayList<Action> temp1 = new ArrayList<Action>();
								//temp1.add(a);
								//temp.add(temp1);
								//allActions.add(temp);
								combinations.add(a);
							}
							
						}
						
					}
						
						for(Action value : parallel_actions.values()) {
							//ArrayList<Action> parallel_action = new ArrayList<Action>();
							combinations.add(value);
							//t.setOuterList(parallel_action);
						}
						//System.out.println(t.getName());
						ArrayList<ArrayList<Action>> final_result = new ArrayList<ArrayList<Action>>();
						for (ArrayList<GoalNode> s : powerSet(combinations)) {
							if(s.size() == 0) {
								continue;
							}
							//if(t.getName().equals("root")) {
							//	System.out.println(s);
							//}
							ArrayList<ArrayList<ArrayList<Action>>> allActions = new ArrayList<ArrayList<ArrayList<Action>>>();
							for(GoalNode g : s) {
								if(g instanceof Task) {
									allActions.add(((Task) g).getOuterList());
								}
								else {
									ArrayList<ArrayList<Action>> temp = new ArrayList<ArrayList<Action>>();
									ArrayList<Action> temp1 = new ArrayList<Action>();
									temp1.add((Action) g);
									temp.add(temp1);
									allActions.add(temp);
								}
							}
							
							ArrayList<ArrayList<Action>> result1 = new ArrayList<ArrayList<Action>>();
							ArrayList<Action> current = new ArrayList<Action>();
							GeneratePermutations(allActions,result1,0,current);
							//System.out.println(result1);
							final_result = Join(final_result,result1);
						}
						
						t.equateOuterList(final_result);
						
						
						
						
						
						
						/*if(t.getHasdecomposition().getDecomposed_to().get(k) instanceof Task) {
							Task t1 = (Task)t.getHasdecomposition().getDecomposed_to().get(k);
							result = Join(result,t1.getOuterList());
						}
						else {
							Action a = (Action)t.getHasdecomposition().getDecomposed_to().get(k);
							ArrayList<Action> temp1 = new ArrayList<Action>();
							temp1.add(a);
							result.add(temp1);
							
						}
						
						
					*/
						
					//t.equateOuterList(result);
					
				}
				
			}
			i++;
			
		}
		return parallel_tasks;
		
	}
}
